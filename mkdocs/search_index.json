{
    "docs": [
        {
            "location": "/", 
            "text": "Integrating an app with Branch\n\n\n\n\nHyperlinks can navigate to your website, but not to your app. Branch fixes this with deep links.\n\n\nBranch will grow your app by allowing users to install, open, and navigate to content inside your app.\n\n\nIncrease discovery of your app by sharing its content, converting web users to app users, enabling user-to-user sharing, personalizing user experiences, tracking users, tracking referrals, tracking campaigns, tracking conversions, and increasing overall engagement.", 
            "title": "Integrating an app with Branch"
        }, 
        {
            "location": "/#integrating-an-app-with-branch", 
            "text": "Hyperlinks can navigate to your website, but not to your app. Branch fixes this with deep links.  Branch will grow your app by allowing users to install, open, and navigate to content inside your app.  Increase discovery of your app by sharing its content, converting web users to app users, enabling user-to-user sharing, personalizing user experiences, tracking users, tracking referrals, tracking campaigns, tracking conversions, and increasing overall engagement.", 
            "title": "Integrating an app with Branch"
        }, 
        {
            "location": "/sdk/", 
            "text": "Installing Cocoapods\n\n\nThe quickest way to get the Branch SDK is by using the dependency manager Cocoapods. However, before you can use Cocoapods to get the Branch SDK, you must first install Cocoapods itself. To do this:\n\n\n\n\nOpen a terminal window\n\n\nPaste in the command: \nsudo gem install cocoapods\n\n\n\n\nOnce the gem has finished installing:\n\n\n\n\nType \ncd\n into the terminal window\n\n\nDrag and drop the \nBuildAnAppAB\n folder into the terminal window\n\n\nPress enter:\n\n\n\n\n\n\nOnce you have a terminal window in the same location as your app's code, we can install the Branch SDK.\n\n\nAdding the Branch Pod\n\n\nTo add the Branch SDK to your Xcode project, we need to initialize cocoapods. To do this, run \npod init\n from the terminal window we set up previously. This will create a new file in your project folder called, descriptively, \nPodfile\n:\n\n\n\n\nThis file contains all of the other code libraries, like the Branch SDK, that your project will use. To add Branch to this list of libraries, open the Podfile in a text editor, and add \npod 'Branch'\n below \n#Pods for ...\n\n\n\n\nOnce the Branch pod as been declared, close your text editor, and run \npod install\n to install the SDK files, and generate a new Xcode workspace:\n\n\n\n\nUsing the new project\n\n\nBecause of the way that Xcode and Cocoapods interact to handle dependencies like the Branch SDK, you won't be able to continue using the \nprojectName.xcproject\n to work on your app. Instead, you need to use the \nprojectName.xcworkspace\n file the was generated in the above steps. To switch, simply quit Xcode and double click the \n.xcworkspace\n file.\n\n\nExposing the SDK\n\n\nBecause the Branch SDK is created in a different language than your app we need to add a \nBridging header\n to your project, to allow your Swift code to make use of the Objective C methods in the SDK. To do this, select \nFile -\n New -\n File\n in your Xcode project, and select the \nHeader file\n option. You can name this file whatever you like, but convention is to follow a \nYourAppName-Bridging-Header.h\n format. Once the file has been created, replace all of it's contents with:\n\n//\n\n\n//  Use this file to import your target\ns public headers that you would like to expose to Swift.\n\n\n//\n\n\n\n#import \nBranch/Branch.h\n\n\n#import \nBranch/BranchUniversalObject.h\n\n\n#import \nBranch/BranchLinkProperties.h", 
            "title": "Getting the SDK"
        }, 
        {
            "location": "/sdk/#installing-cocoapods", 
            "text": "The quickest way to get the Branch SDK is by using the dependency manager Cocoapods. However, before you can use Cocoapods to get the Branch SDK, you must first install Cocoapods itself. To do this:   Open a terminal window  Paste in the command:  sudo gem install cocoapods   Once the gem has finished installing:   Type  cd  into the terminal window  Drag and drop the  BuildAnAppAB  folder into the terminal window  Press enter:    Once you have a terminal window in the same location as your app's code, we can install the Branch SDK.", 
            "title": "Installing Cocoapods"
        }, 
        {
            "location": "/sdk/#adding-the-branch-pod", 
            "text": "To add the Branch SDK to your Xcode project, we need to initialize cocoapods. To do this, run  pod init  from the terminal window we set up previously. This will create a new file in your project folder called, descriptively,  Podfile :   This file contains all of the other code libraries, like the Branch SDK, that your project will use. To add Branch to this list of libraries, open the Podfile in a text editor, and add  pod 'Branch'  below  #Pods for ...   Once the Branch pod as been declared, close your text editor, and run  pod install  to install the SDK files, and generate a new Xcode workspace:", 
            "title": "Adding the Branch Pod"
        }, 
        {
            "location": "/sdk/#using-the-new-project", 
            "text": "Because of the way that Xcode and Cocoapods interact to handle dependencies like the Branch SDK, you won't be able to continue using the  projectName.xcproject  to work on your app. Instead, you need to use the  projectName.xcworkspace  file the was generated in the above steps. To switch, simply quit Xcode and double click the  .xcworkspace  file.", 
            "title": "Using the new project"
        }, 
        {
            "location": "/sdk/#exposing-the-sdk", 
            "text": "Because the Branch SDK is created in a different language than your app we need to add a  Bridging header  to your project, to allow your Swift code to make use of the Objective C methods in the SDK. To do this, select  File -  New -  File  in your Xcode project, and select the  Header file  option. You can name this file whatever you like, but convention is to follow a  YourAppName-Bridging-Header.h  format. Once the file has been created, replace all of it's contents with: //  //  Use this file to import your target s public headers that you would like to expose to Swift.  //  #import  Branch/Branch.h  #import  Branch/BranchUniversalObject.h  #import  Branch/BranchLinkProperties.h", 
            "title": "Exposing the SDK"
        }, 
        {
            "location": "/dash/", 
            "text": "Creating a new app\n\n\nBefore moving on any further, we need to create a Branch app, to use with your Xcode app. To do this, head over to the \nBranch Dashboard\n and click the app selector in the top left corner. Once there, select \nCreate new app\n, and give it a descriptive name:\n\n\n\n\nSetting up link redirects\n\n\nWith a new Branch app, we need to specify where your future users will be sent. To do this, head over to the \nLink Settings\n tab, and:\n\n\n\n\nSelect \nI have an iOS App\n\n\nEnter an iOS redirect URL (eg \nhttp://branch.io\n)\n\n\n(Optional) Add redirects for Android and Desktop\n\n\nClick save\n\n\n\n\n\n\nAdding the Branch key to Xcode\n\n\nFinally, before moving forward, we need to add the key of the newly created Branch app to your Xcode project. Head over to the \nAccount Settings\n page of your dashboard, and copy the \nBranch Key\n. Switch back to Xcode and open the \ninfo.plist\n file. Hover over the last entry, and click the \n+\n button. Name the new entry \nbranch_key\n and use the drop-down menu on the right to set the type to \ndictionary\n. Then, hovering over the \nbranch_key\n entry, click the \n+\n symbol again, adding an entry \nlive\n with the value being the Branch key you copied earlier.", 
            "title": "Creating an app"
        }, 
        {
            "location": "/dash/#creating-a-new-app", 
            "text": "Before moving on any further, we need to create a Branch app, to use with your Xcode app. To do this, head over to the  Branch Dashboard  and click the app selector in the top left corner. Once there, select  Create new app , and give it a descriptive name:", 
            "title": "Creating a new app"
        }, 
        {
            "location": "/dash/#setting-up-link-redirects", 
            "text": "With a new Branch app, we need to specify where your future users will be sent. To do this, head over to the  Link Settings  tab, and:   Select  I have an iOS App  Enter an iOS redirect URL (eg  http://branch.io )  (Optional) Add redirects for Android and Desktop  Click save", 
            "title": "Setting up link redirects"
        }, 
        {
            "location": "/dash/#adding-the-branch-key-to-xcode", 
            "text": "Finally, before moving forward, we need to add the key of the newly created Branch app to your Xcode project. Head over to the  Account Settings  page of your dashboard, and copy the  Branch Key . Switch back to Xcode and open the  info.plist  file. Hover over the last entry, and click the  +  button. Name the new entry  branch_key  and use the drop-down menu on the right to set the type to  dictionary . Then, hovering over the  branch_key  entry, click the  +  symbol again, adding an entry  live  with the value being the Branch key you copied earlier.", 
            "title": "Adding the Branch key to Xcode"
        }, 
        {
            "location": "/ul-uri/", 
            "text": "URI Schemes\n\n\nWhile we're still on the dashboard, let's come up with a URI scheme for your app. This can be anything you want (so long as it doesn't contain any \"special\" characters), and is used for opening your app in situations where Universal Links can't.\n\n\nOnce you have a URI scheme to use, enter it on the dashboard, and click save. Once the dashboard has updated, switch to Xcode, and:\n\n\n\n\nClick the project file (it's the item at the top of the file list)\n\n\nSelect the \nInfo\n tab\n\n\nExpand the \nURL Types\n section\n\n\nClick the \n+\n symbol\n\n\nIn the \nURL Schemes\n box, paste the URI Scheme you decided on above\n\n\n\n\n\n\nUniversal Links\n\n\nDashboard setup\n\n\nUniversal Links are crucial for opening your app, so getting them set up is one of the most important parts of integrating with Branch.\n\n\nTo configure Universal Links, first go to the \nCertificates, Identifiers \n Profiles\n page of Apple's Developer website. Once on the website, search for the \nBundle Identifier\n that you set for your project, in Xcode. Once you've found it, expand the entry, and copy the \nPrefix\n value.\n\n\nWith the \nPrefix\n for your app, head over to the \nlink settings\n page of your dashboard. Here, set the \nApple App Prefix\n to the value you just copied, and update the  \nBundle Identifier\n field to the id you set for your project. Don't forget to click save!\n\n\n\n\nXcode setup\n\n\nOnce you've updated your dashboard settings, you need to switch back to Xcode to configure the \nEntitlements\n with your Branch app. Before switch, though, make sure to note down the Branch \nsomething\n.app.link\n domain that your Branch app is using.\n\n\nIn Xcode, click your project file (top of the list) and select the \nCapabilities\n tab. Expand the \nAssociated Domains\n section, turn it \non\n, and add two entries:\n\n\n\n\napplinks:something.app.link\n\n\napplinks:something-alternate.app.link\n\n\n\n\nreplacing \nsomething\n with your Branch domain.", 
            "title": "Opening the app with links"
        }, 
        {
            "location": "/ul-uri/#uri-schemes", 
            "text": "While we're still on the dashboard, let's come up with a URI scheme for your app. This can be anything you want (so long as it doesn't contain any \"special\" characters), and is used for opening your app in situations where Universal Links can't.  Once you have a URI scheme to use, enter it on the dashboard, and click save. Once the dashboard has updated, switch to Xcode, and:   Click the project file (it's the item at the top of the file list)  Select the  Info  tab  Expand the  URL Types  section  Click the  +  symbol  In the  URL Schemes  box, paste the URI Scheme you decided on above", 
            "title": "URI Schemes"
        }, 
        {
            "location": "/ul-uri/#universal-links", 
            "text": "", 
            "title": "Universal Links"
        }, 
        {
            "location": "/ul-uri/#dashboard-setup", 
            "text": "Universal Links are crucial for opening your app, so getting them set up is one of the most important parts of integrating with Branch.  To configure Universal Links, first go to the  Certificates, Identifiers   Profiles  page of Apple's Developer website. Once on the website, search for the  Bundle Identifier  that you set for your project, in Xcode. Once you've found it, expand the entry, and copy the  Prefix  value.  With the  Prefix  for your app, head over to the  link settings  page of your dashboard. Here, set the  Apple App Prefix  to the value you just copied, and update the   Bundle Identifier  field to the id you set for your project. Don't forget to click save!", 
            "title": "Dashboard setup"
        }, 
        {
            "location": "/ul-uri/#xcode-setup", 
            "text": "Once you've updated your dashboard settings, you need to switch back to Xcode to configure the  Entitlements  with your Branch app. Before switch, though, make sure to note down the Branch  something .app.link  domain that your Branch app is using.  In Xcode, click your project file (top of the list) and select the  Capabilities  tab. Expand the  Associated Domains  section, turn it  on , and add two entries:   applinks:something.app.link  applinks:something-alternate.app.link   replacing  something  with your Branch domain.", 
            "title": "Xcode setup"
        }, 
        {
            "location": "/using-sdk/", 
            "text": "Initializing Branch\n\n\nNow that we have all of the setup out of the way, we can start using the SDK. The first thing that we need to do is import the Branch SDK, so we can make use of it in your app. To do this, find the \nimport UIKit\n line at the top of your \nAppDelegate\n file, and add a new line below it:\n\nimport\n \nBranch\n\n\n\n\n\n\nNow that we have the SDK available to use, let's initialize a Branch session. To do this, open your \nAppDelegate\n file in Xcode, and find the \napplication:didFinishLaunchingWithOptions\n section of code. On the line above \nreturn true\n add:\n\nlet\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n()\n\n\n\n\nThen, one line below, add the Branch \ninitSession\n call:\n\nbranch\n?.\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n,\n \nandRegisterDeepLinkHandler\n:\n \n{\nparams\n,\n \nerror\n \nin\n\n    \n// Check if an error occurred while getting deep link data\n\n    \nif\n \nerror\n \n==\n \nnil\n \n{\n\n        \n// params are the deep linked params associated with the link that the user clicked -\n was re-directed to this app\n\n        \n// params will be empty if no data found\n\n        \n// ... insert custom logic here ...\n\n        \nprint\n(\nparams: %@\n,\n \nparams\n.\ndescription\n)\n\n    \n}\n\n\n})\n\n\n\n\n\n\nThis code initiates a call to Branch's API to retrieve any deep link data that might exist. Right now, all it's doing it printing the data out to Xcode's console, and then continuing startup as normal. To get your links to route users to the correct place in your app, we need to add some custom \"Deep link routing\" logic.\n\n\nHandling Links\n\n\nBefore we start deep linking to all the various parts of your app, we need to make sure that your app is aware of \"incoming\" links, and handles them correctly. To do this, add the following before the very last \n}\n in your \nAppDelegate\n:\n\n\n// Respond to URI scheme links\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \nopen\n \nurl\n:\n \nURL\n,\n \nsourceApplication\n:\n \nString\n?,\n \nannotation\n:\n \nAny\n)\n \n-\n \nBool\n \n{\n\n    \n// pass the url to the handle deep link call\n\n    \nBranch\n.\ngetInstance\n().\nhandleDeepLink\n(\nurl\n);\n\n\n    \n// do other deep link routing for the Facebook SDK, Pinterest SDK, etc\n\n    \nreturn\n \ntrue\n\n\n}\n\n\n\n// Respond to Universal Links\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ncontinue\n \nuserActivity\n:\n \nNSUserActivity\n,\n \nrestorationHandler\n:\n \n@\nescaping\n \n([\nAny\n]?)\n \n-\n \nVoid\n)\n \n-\n \nBool\n \n{\n\n    \n// pass the url to the handle deep link call\n\n    \nBranch\n.\ngetInstance\n().\ncontinue\n(\nuserActivity\n)\n\n\n    \nreturn\n \ntrue\n\n\n}\n\n\n\n\n\n\nDeep Link routing\n\n\nThe last core component of deep linking we need to add to your app is the code that decides where to take the user, depending on the data inside of the Branch link they clicked.\n\n\nTo start off, let's add a variable to the \nAppDelegate\n to let us track and set the type of animal we will show to the user on startup. Below the line with \nvar window: UIWindow?\n, add a new variable:\n\nvar\n \nselectedAnimal\n:\n \nString\n?\n\n\n\n\n\n\nNow, go back the the \ninitSession\n call you added earlier, and replace the:\n\nif\n \nerror\n \n==\n \nnil\n \n{\n\n    \n// params are the deep linked params associated with the link that the user clicked -\n was re-directed to this app\n\n    \n// params will be empty if no data found\n\n    \n// ... insert custom logic here ...\n\n    \nprint\n(\nparams: %@\n,\n \nparams\n.\ndescription\n)\n\n\n}\n\n\n\n\ncode with:\n\nif\n \nerror\n \n==\n \nnil\n \n \nparams\n?[\nanimal\n]\n \n!=\n \nnil\n \n{\n\n\n    \nself\n.\nselectedAnimal\n \n=\n \nparams\n?[\nanimal\n]\n!\n \nas\n!\n \nString\n?\n\n    \nprint\n(\nClicked animal link for \n\\(\nself\n.\nselectedAnimal\n!\n)\n!\n)\n\n\n    \nlet\n \nstoryboard\n \n=\n \nUIStoryboard\n(\nname\n:\n \nMain\n,\n \nbundle\n:\n \nnil\n)\n\n    \nlet\n \nmainController\n \n=\n \nstoryboard\n.\ninstantiateInitialViewController\n()\n!\n \nas\n \nUIViewController\n\n    \nself\n.\nwindow\n!.\nrootViewController\n \n=\n \nmainController\n\n\n    \nlet\n \ndestination\n \n=\n \nstoryboard\n.\ninstantiateViewController\n(\nwithIdentifier\n:\n \nanimalDetails\n)\n \nas\n!\n \nDetailViewController\n\n    \ndestination\n.\nselectedAnimal\n \n=\n \nString\n(\ndescribing\n:\n \nself\n.\nselectedAnimal\n!)\n\n\n    \nself\n.\nwindow\n!.\nrootViewController\n?.\npresent\n(\ndestination\n,\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n\n\n}\n\n\n\n\n\n\nThis is quite a change, so let's go back over it and see what each part is doing.\n\n\nTo start off, the first line:\n\nif\n \nerror\n \n==\n \nnil\n \n \nparams\n?[\n+clicked_branch_link\n]\n \n!=\n \nnil\n \n \nparams\n?[\nanimal\n]\n \n!=\n \nnil\n \n{\n\n\n\n\nis checking to make sure that:\n\n\n\n\nNo errors occurred while we were retrieving the deep link data from Branch\n\n\nThe deep link data the was returned has an \nanimal\n\n\n\n\nOnce we verified that nothing went wrong, and that we have the data we need in order to route the user, we set the \nselectedAnimal\n variable to the \nanimal\n in the deep link data:\n\nself\n.\nselectedAnimal\n \n=\n \nparams\n?[\nanimal\n]\n!\n \nas\n!\n \nString\n?\n\n\n\n\n\n\nNow, with an animal to show to the user, we can start preparing the view components that we will show to the user. In order to do this, we need to set up the main view controller, and then get an instance of the DetailViewController we will show to the user:\n\nlet\n \nstoryboard\n \n=\n \nUIStoryboard\n(\nname\n:\n \nMain\n,\n \nbundle\n:\n \nnil\n)\n\n\nlet\n \nmainController\n \n=\n \nstoryboard\n.\ninstantiateInitialViewController\n()\n!\n \nas\n \nUIViewController\n\n\nself\n.\nwindow\n!.\nrootViewController\n \n=\n \nmainController\n\n\n\nlet\n \ndestination\n \n=\n \nstoryboard\n.\ninstantiateViewController\n(\nwithIdentifier\n:\n \nanimalDetails\n)\n \nas\n!\n \nDetailViewController\n\n\n\n\n\n\nFinally, we set the \nselectedAnimal\n property of our destination view to the \nanimal\n we pulled from the returned deep link data, and present the view to the user.\n\n\ndestination\n.\nselectedAnimal\n \n=\n \nString\n(\ndescribing\n:\n \nself\n.\nselectedAnimal\n!)\n\n\n\nself\n.\nwindow\n!.\nrootViewController\n?.\npresent\n(\ndestination\n,\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)", 
            "title": "Using the SDK"
        }, 
        {
            "location": "/using-sdk/#initializing-branch", 
            "text": "Now that we have all of the setup out of the way, we can start using the SDK. The first thing that we need to do is import the Branch SDK, so we can make use of it in your app. To do this, find the  import UIKit  line at the top of your  AppDelegate  file, and add a new line below it: import   Branch    Now that we have the SDK available to use, let's initialize a Branch session. To do this, open your  AppDelegate  file in Xcode, and find the  application:didFinishLaunchingWithOptions  section of code. On the line above  return true  add: let   branch   =   Branch . getInstance ()  \n\nThen, one line below, add the Branch  initSession  call: branch ?. initSession ( launchOptions :   launchOptions ,   andRegisterDeepLinkHandler :   { params ,   error   in \n     // Check if an error occurred while getting deep link data \n     if   error   ==   nil   { \n         // params are the deep linked params associated with the link that the user clicked -  was re-directed to this app \n         // params will be empty if no data found \n         // ... insert custom logic here ... \n         print ( params: %@ ,   params . description ) \n     }  })    This code initiates a call to Branch's API to retrieve any deep link data that might exist. Right now, all it's doing it printing the data out to Xcode's console, and then continuing startup as normal. To get your links to route users to the correct place in your app, we need to add some custom \"Deep link routing\" logic.", 
            "title": "Initializing Branch"
        }, 
        {
            "location": "/using-sdk/#handling-links", 
            "text": "Before we start deep linking to all the various parts of your app, we need to make sure that your app is aware of \"incoming\" links, and handles them correctly. To do this, add the following before the very last  }  in your  AppDelegate :  // Respond to URI scheme links  func   application ( _   application :   UIApplication ,   open   url :   URL ,   sourceApplication :   String ?,   annotation :   Any )   -   Bool   { \n     // pass the url to the handle deep link call \n     Branch . getInstance (). handleDeepLink ( url ); \n\n     // do other deep link routing for the Facebook SDK, Pinterest SDK, etc \n     return   true  }  // Respond to Universal Links  func   application ( _   application :   UIApplication ,   continue   userActivity :   NSUserActivity ,   restorationHandler :   @ escaping   ([ Any ]?)   -   Void )   -   Bool   { \n     // pass the url to the handle deep link call \n     Branch . getInstance (). continue ( userActivity ) \n\n     return   true  }", 
            "title": "Handling Links"
        }, 
        {
            "location": "/using-sdk/#deep-link-routing", 
            "text": "The last core component of deep linking we need to add to your app is the code that decides where to take the user, depending on the data inside of the Branch link they clicked.  To start off, let's add a variable to the  AppDelegate  to let us track and set the type of animal we will show to the user on startup. Below the line with  var window: UIWindow? , add a new variable: var   selectedAnimal :   String ?    Now, go back the the  initSession  call you added earlier, and replace the: if   error   ==   nil   { \n     // params are the deep linked params associated with the link that the user clicked -  was re-directed to this app \n     // params will be empty if no data found \n     // ... insert custom logic here ... \n     print ( params: %@ ,   params . description )  }  \n\ncode with: if   error   ==   nil     params ?[ animal ]   !=   nil   { \n\n     self . selectedAnimal   =   params ?[ animal ] !   as !   String ? \n     print ( Clicked animal link for  \\( self . selectedAnimal ! ) ! ) \n\n     let   storyboard   =   UIStoryboard ( name :   Main ,   bundle :   nil ) \n     let   mainController   =   storyboard . instantiateInitialViewController () !   as   UIViewController \n     self . window !. rootViewController   =   mainController \n\n     let   destination   =   storyboard . instantiateViewController ( withIdentifier :   animalDetails )   as !   DetailViewController \n     destination . selectedAnimal   =   String ( describing :   self . selectedAnimal !) \n\n     self . window !. rootViewController ?. present ( destination ,   animated :   true ,   completion :   nil )  }    This is quite a change, so let's go back over it and see what each part is doing.  To start off, the first line: if   error   ==   nil     params ?[ +clicked_branch_link ]   !=   nil     params ?[ animal ]   !=   nil   {  \n\nis checking to make sure that:   No errors occurred while we were retrieving the deep link data from Branch  The deep link data the was returned has an  animal   Once we verified that nothing went wrong, and that we have the data we need in order to route the user, we set the  selectedAnimal  variable to the  animal  in the deep link data: self . selectedAnimal   =   params ?[ animal ] !   as !   String ?    Now, with an animal to show to the user, we can start preparing the view components that we will show to the user. In order to do this, we need to set up the main view controller, and then get an instance of the DetailViewController we will show to the user: let   storyboard   =   UIStoryboard ( name :   Main ,   bundle :   nil )  let   mainController   =   storyboard . instantiateInitialViewController () !   as   UIViewController  self . window !. rootViewController   =   mainController  let   destination   =   storyboard . instantiateViewController ( withIdentifier :   animalDetails )   as !   DetailViewController    Finally, we set the  selectedAnimal  property of our destination view to the  animal  we pulled from the returned deep link data, and present the view to the user.  destination . selectedAnimal   =   String ( describing :   self . selectedAnimal !)  self . window !. rootViewController ?. present ( destination ,   animated :   true ,   completion :   nil )", 
            "title": "Deep Link routing"
        }
    ]
}