{
    "docs": [
        {
            "location": "/", 
            "text": "Integrating an app with Branch\n\n\n\n\nHyperlinks can navigate to your website, but not to your app. Branch fixes this with deep links.\n\n\nBranch will grow your app by allowing users to install, open, and navigate to content inside your app.\n\n\nIncrease discovery of your app by sharing its content, converting web users to app users, enabling user-to-user sharing, personalizing user experiences, tracking users, tracking referrals, tracking campaigns, tracking conversions, and increasing overall engagement.", 
            "title": "Integrating an app with Branch"
        }, 
        {
            "location": "/#integrating-an-app-with-branch", 
            "text": "Hyperlinks can navigate to your website, but not to your app. Branch fixes this with deep links.  Branch will grow your app by allowing users to install, open, and navigate to content inside your app.  Increase discovery of your app by sharing its content, converting web users to app users, enabling user-to-user sharing, personalizing user experiences, tracking users, tracking referrals, tracking campaigns, tracking conversions, and increasing overall engagement.", 
            "title": "Integrating an app with Branch"
        }, 
        {
            "location": "/sdk/", 
            "text": "Installing Cocoapods\n\n\nThe quickest way to get the Branch SDK is by using the dependency manager Cocoapods. However, before you can use Cocoapods to get the Branch SDK, you must first install Cocoapods itself. To do this:\n\n\n\n\nOpen a terminal window\n\n\nPaste in the command: \nsudo gem install cocoapods\n\n\n\n\n\n\nThe \nsudo\n command provides special permissions needed to install Cocoapods, so you'll need to enter your computer password when prompted\n\n\n\n\nOnce the command finishes running:\n\n\n\n\nType \ncd\n into the terminal window, and add a space\n\n\nDrag and drop your project folder (eg \nBuildAnAppJB\n) into the terminal window. Your command should now look something similar to:\n\ncd\n /Users/\nyour name\n/Documents/BuildAnAppJB\n\n\n\n\n\nPress enter:\n\n\n\n\n\n\nOnce you have a terminal window in the same location as your app's code, we can install the Branch SDK.\n\n\nAdding the Branch Pod\n\n\nTo add the Branch SDK to your Xcode project, we need to initialize cocoapods. To do this, run:\n\n\n\n\npod init\n\n\n\n\nfrom the terminal window we set up previously. This will create a new file in your project folder called, descriptively, \nPodfile\n:\n\n\n\n\nThis file contains all of the other code libraries, like the Branch SDK, that your project will use. To add Branch to this list of libraries:\n\n\n\n\nopen the \nPodfile\n in a text editor\n\n\nPaste in \npod 'Branch'\n below the line \n#Pods for ...\n\n\n\n\n\n\nDepending on your computer settings, the \nPodfile\n may or may not open in a text editor when you double click it.\nTo be safe, you can right click the file and select \nOpen with -\n \nSome text editing application\n.\nNote that if you choose \nTextEdit\n, be carefull that you \npaste\n \npod 'Branch'\n into the file, instead of typing it manually, or you will end up with the wrong type of \n'\n's (yes, there are multiple types).\n\n\n\n\n\n\nWith the Branch pod declared, save the file and close your text editor. Then run:\n\n\n\n\npod install\n\n\n\n\nin your terminal window to add the SDK files and generate a new Xcode workspace:\n\n\n\n\nUsing the new project\n\n\nBecause of the way that Xcode and Cocoapods interact to handle project dependencies like the Branch SDK, you won't be able to continue using the \nprojectName.xcproject\n file to work on your app. Instead, you need to use the \nprojectName.xcworkspace\n file the was generated in the above steps. This \nxcworkspace\n file allows you to use both your code, and the Branch SDK code in the same project. To switch, simply quit Xcode and double click the new \n.xcworkspace\n file.\n\n\nExposing the SDK\n\n\nBranch SDK is created in a different language than your app, so to be able to use the SDK in your app, you need to add a \nBridging header\n to your project, to allow your Swift code to make use of the Objective C code in the SDK. To do this:\n\n\n\n\nSelect \nFile -\n New -\n File\n in Xcode\n\n\nSelect the \nHeader file\n option\n\n\n\n\n\n\nYou can name this file whatever you like, but convention is to follow a \nYourAppName-Bridging-Header.h\n format.\n\n\n\n\nAfter the file has been created, replace all of its contents with:\n\n//\n\n\n//  Use this file to import your target\ns public headers that you would like to expose to Swift.\n\n\n//\n\n\n\n#import \nBranch/Branch.h\n\n\n#import \nBranch/BranchUniversalObject.h\n\n\n#import \nBranch/BranchLinkProperties.h", 
            "title": "Getting the SDK"
        }, 
        {
            "location": "/sdk/#installing-cocoapods", 
            "text": "The quickest way to get the Branch SDK is by using the dependency manager Cocoapods. However, before you can use Cocoapods to get the Branch SDK, you must first install Cocoapods itself. To do this:   Open a terminal window  Paste in the command:  sudo gem install cocoapods    The  sudo  command provides special permissions needed to install Cocoapods, so you'll need to enter your computer password when prompted   Once the command finishes running:   Type  cd  into the terminal window, and add a space  Drag and drop your project folder (eg  BuildAnAppJB ) into the terminal window. Your command should now look something similar to: cd  /Users/ your name /Documents/BuildAnAppJB   Press enter:    Once you have a terminal window in the same location as your app's code, we can install the Branch SDK.", 
            "title": "Installing Cocoapods"
        }, 
        {
            "location": "/sdk/#adding-the-branch-pod", 
            "text": "To add the Branch SDK to your Xcode project, we need to initialize cocoapods. To do this, run:   pod init   from the terminal window we set up previously. This will create a new file in your project folder called, descriptively,  Podfile :   This file contains all of the other code libraries, like the Branch SDK, that your project will use. To add Branch to this list of libraries:   open the  Podfile  in a text editor  Paste in  pod 'Branch'  below the line  #Pods for ...    Depending on your computer settings, the  Podfile  may or may not open in a text editor when you double click it.\nTo be safe, you can right click the file and select  Open with -   Some text editing application .\nNote that if you choose  TextEdit , be carefull that you  paste   pod 'Branch'  into the file, instead of typing it manually, or you will end up with the wrong type of  ' 's (yes, there are multiple types).    With the Branch pod declared, save the file and close your text editor. Then run:   pod install   in your terminal window to add the SDK files and generate a new Xcode workspace:", 
            "title": "Adding the Branch Pod"
        }, 
        {
            "location": "/sdk/#using-the-new-project", 
            "text": "Because of the way that Xcode and Cocoapods interact to handle project dependencies like the Branch SDK, you won't be able to continue using the  projectName.xcproject  file to work on your app. Instead, you need to use the  projectName.xcworkspace  file the was generated in the above steps. This  xcworkspace  file allows you to use both your code, and the Branch SDK code in the same project. To switch, simply quit Xcode and double click the new  .xcworkspace  file.", 
            "title": "Using the new project"
        }, 
        {
            "location": "/sdk/#exposing-the-sdk", 
            "text": "Branch SDK is created in a different language than your app, so to be able to use the SDK in your app, you need to add a  Bridging header  to your project, to allow your Swift code to make use of the Objective C code in the SDK. To do this:   Select  File -  New -  File  in Xcode  Select the  Header file  option    You can name this file whatever you like, but convention is to follow a  YourAppName-Bridging-Header.h  format.   After the file has been created, replace all of its contents with: //  //  Use this file to import your target s public headers that you would like to expose to Swift.  //  #import  Branch/Branch.h  #import  Branch/BranchUniversalObject.h  #import  Branch/BranchLinkProperties.h", 
            "title": "Exposing the SDK"
        }, 
        {
            "location": "/dash/", 
            "text": "Creating a new app\n\n\nIn order to start setting up our app to use Branch links, we need to create a Branch app to use with your Xcode project. To do this, head over to the \nBranch Dashboard\n and click the app selector in the top left corner:\n\n\n\n\nSelect \nCreate new app\n\n\nName it something descriptive\n\n\n\n\n\n\nSetting up link redirects\n\n\nWith a new Branch app, we need to specify where your future users will be sent. To do this, head over to the \nLink Settings\n tab, and:\n\n\n\n\nSelect \nI have an iOS App\n\n\nEnter an iOS redirect URL (eg \nhttp://branch.io\n)\n\n\n(Optional) Add redirects for Android and Desktop\n\n\nClick save\n\n\n\n\n\n\nAdding the Branch key to Xcode\n\n\nFinally, before moving forward, we need to add the key of the newly created Branch app to your Xcode project. Head over to the \nAccount Settings\n page of your dashboard, and copy the \nBranch Key\n. Switch back to Xcode and:\n\n\n\n\nOpen the \ninfo.plist\n file\n\n\nHover over the last entry, and click the \n+\n button\n\n\nName the new entry \nbranch_key\n and use the drop-down menu on the right to set the type to \ndictionary\n\n\nHover over the \nbranch_key\n entry, and click the \n+\n symbol again\n\n\nName the new entry \nlive\n, and set the value to the Branch key you copied earlier.", 
            "title": "Creating an app"
        }, 
        {
            "location": "/dash/#creating-a-new-app", 
            "text": "In order to start setting up our app to use Branch links, we need to create a Branch app to use with your Xcode project. To do this, head over to the  Branch Dashboard  and click the app selector in the top left corner:   Select  Create new app  Name it something descriptive", 
            "title": "Creating a new app"
        }, 
        {
            "location": "/dash/#setting-up-link-redirects", 
            "text": "With a new Branch app, we need to specify where your future users will be sent. To do this, head over to the  Link Settings  tab, and:   Select  I have an iOS App  Enter an iOS redirect URL (eg  http://branch.io )  (Optional) Add redirects for Android and Desktop  Click save", 
            "title": "Setting up link redirects"
        }, 
        {
            "location": "/dash/#adding-the-branch-key-to-xcode", 
            "text": "Finally, before moving forward, we need to add the key of the newly created Branch app to your Xcode project. Head over to the  Account Settings  page of your dashboard, and copy the  Branch Key . Switch back to Xcode and:   Open the  info.plist  file  Hover over the last entry, and click the  +  button  Name the new entry  branch_key  and use the drop-down menu on the right to set the type to  dictionary  Hover over the  branch_key  entry, and click the  +  symbol again  Name the new entry  live , and set the value to the Branch key you copied earlier.", 
            "title": "Adding the Branch key to Xcode"
        }, 
        {
            "location": "/ul-uri/", 
            "text": "URI Schemes\n\n\nWhile we're still on the dashboard, let's come up with a URI scheme for your app. This can be anything you want (so long as it doesn't contain any \"special\" characters), and is used for opening your app in situations where Universal Links can't.\n\n\nOnce you have a URI scheme to use, enter it on the dashboard, and click save. Once the dashboard has updated, switch to Xcode, and:\n\n\n\n\nClick the project file (its the item at the top of the file list)\n\n\nSelect the \nInfo\n tab\n\n\nExpand the \nURL Types\n section\n\n\nClick the \n+\n symbol\n\n\nIn the \nURL Schemes\n box, paste the URI Scheme you decided on above\n\n\n\n\n\n\nUniversal Links\n\n\nDashboard setup\n\n\nUniversal Links are crucial for opening your app, so getting them set up is one of the most important parts of integrating with Branch.\n\n\nTo configure Universal Links:\n\n\n\n\nGo to the \nCertificates, Identifiers \n Profiles\n page of Apple's Developer website.\n\n\nSearch for the \nBundle Identifier\n that you set for your project, in Xcode.\n\n\nExpand the entry, and copy the \nPrefix\n value.\n\n\n\n\nWith the \nPrefix\n for your app, head over to the \nlink settings\n page of your dashboard. Here:\n- Set the \nApple App Prefix\n to the value you just copied,\n- Update the \nBundle Identifier\n field to the id you set for your project.\n\n\n\n\nDon't forget to click save!\n\n\n\n\n\n\nXcode setup\n\n\nOnce you've updated your dashboard settings, you need to switch back to Xcode to configure the \nEntitlements\n with your Branch app. Before switch, though, make sure to note down the Branch \nsomething\n.app.link\n domain that your Branch app is using. In Xcode:\n\n\n\n\nClick your project file (top of the list)\n\n\nSelect the \nCapabilities\n tab\n\n\nExpand the \nAssociated Domains\n section\n\n\n\n\nSet the \nAssociated Domains\n to \non\n, and add two entries:\n\n\n\n\napplinks:something.app.link\n\n\napplinks:something-alternate.app.link\n\n\n\n\nreplacing \nsomething\n with your Branch domain.\n\n\n\n\nOne last thing to note is that iOS doesn't update your app's Universal Link settings automatically, so before moving on, make sure to uninstall the app from your device, and re-install it with the new changes.\n\n\nTesting break\n\n\nAt this point, your Branch links should now be able to open your app. Give it a shot by \ncreating a new link\n, and clicking it from Slack. You should see your app immediately launched to it's home screen.\n\n\nTroubleshooting\n\n\nDid your link not open your app? As cliched as it sounds, try uninstalling the app, and then turning your phone off and on again. If you continue to run into issue, double check all of the values you added in the above steps are correct, and then \nreach out for help\n.", 
            "title": "Opening the app with links"
        }, 
        {
            "location": "/ul-uri/#uri-schemes", 
            "text": "While we're still on the dashboard, let's come up with a URI scheme for your app. This can be anything you want (so long as it doesn't contain any \"special\" characters), and is used for opening your app in situations where Universal Links can't.  Once you have a URI scheme to use, enter it on the dashboard, and click save. Once the dashboard has updated, switch to Xcode, and:   Click the project file (its the item at the top of the file list)  Select the  Info  tab  Expand the  URL Types  section  Click the  +  symbol  In the  URL Schemes  box, paste the URI Scheme you decided on above", 
            "title": "URI Schemes"
        }, 
        {
            "location": "/ul-uri/#universal-links", 
            "text": "", 
            "title": "Universal Links"
        }, 
        {
            "location": "/ul-uri/#dashboard-setup", 
            "text": "Universal Links are crucial for opening your app, so getting them set up is one of the most important parts of integrating with Branch.  To configure Universal Links:   Go to the  Certificates, Identifiers   Profiles  page of Apple's Developer website.  Search for the  Bundle Identifier  that you set for your project, in Xcode.  Expand the entry, and copy the  Prefix  value.   With the  Prefix  for your app, head over to the  link settings  page of your dashboard. Here:\n- Set the  Apple App Prefix  to the value you just copied,\n- Update the  Bundle Identifier  field to the id you set for your project.   Don't forget to click save!", 
            "title": "Dashboard setup"
        }, 
        {
            "location": "/ul-uri/#xcode-setup", 
            "text": "Once you've updated your dashboard settings, you need to switch back to Xcode to configure the  Entitlements  with your Branch app. Before switch, though, make sure to note down the Branch  something .app.link  domain that your Branch app is using. In Xcode:   Click your project file (top of the list)  Select the  Capabilities  tab  Expand the  Associated Domains  section   Set the  Associated Domains  to  on , and add two entries:   applinks:something.app.link  applinks:something-alternate.app.link   replacing  something  with your Branch domain.   One last thing to note is that iOS doesn't update your app's Universal Link settings automatically, so before moving on, make sure to uninstall the app from your device, and re-install it with the new changes.", 
            "title": "Xcode setup"
        }, 
        {
            "location": "/ul-uri/#testing-break", 
            "text": "At this point, your Branch links should now be able to open your app. Give it a shot by  creating a new link , and clicking it from Slack. You should see your app immediately launched to it's home screen.", 
            "title": "Testing break"
        }, 
        {
            "location": "/ul-uri/#troubleshooting", 
            "text": "Did your link not open your app? As cliched as it sounds, try uninstalling the app, and then turning your phone off and on again. If you continue to run into issue, double check all of the values you added in the above steps are correct, and then  reach out for help .", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/using-sdk/", 
            "text": "Initializing Branch\n\n\nNow that we have all of the setup out of the way, we can start using the SDK. The first thing that we need to do is import the Branch SDK, so we can make use of it in your app. To do this, find the \nimport UIKit\n line at the top of your \nAppDelegate\n file, and add a new line below it:\n\nimport\n \nBranch\n\n\n\n\n\n\nNow that we have the SDK available to use, let's initialize a Branch session. To do this, open your \nAppDelegate\n file in Xcode, and find the \napplication:didFinishLaunchingWithOptions\n section of code. On the line above \nreturn true\n add:\n\nlet\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n()\n\n\n\n\nThen, one line below, add the Branch \ninitSession\n call:\n\nbranch\n?.\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n,\n \nandRegisterDeepLinkHandler\n:\n \n{\nparams\n,\n \nerror\n \nin\n\n    \n// Check if an error occurred while getting deep link data\n\n    \nif\n \nerror\n \n==\n \nnil\n \n{\n\n        \n// params are the deep linked params associated with the link that the user clicked -\n was re-directed to this app\n\n        \n// params will be empty if no data found\n\n        \n// ... insert custom logic here ...\n\n        \nprint\n(\nparams: %@\n,\n \nparams\n.\ndescription\n)\n\n    \n}\n\n\n})\n\n\n\n\n\n\nThis code initiates a call to Branch's API to retrieve any deep link data that might exist. Right now, all it's doing it printing the data out to Xcode's console, and then continuing startup as normal. To get your links to route users to the correct place in your app, we need to add some custom \"Deep link routing\" logic.\n\n\nHandling Links\n\n\nBefore we start deep linking to all the various parts of your app, we need to make sure that your app is aware of \"incoming\" links, and handles them correctly. To do this, add the following before the very last \n}\n in your \nAppDelegate\n:\n\n\n// Respond to URI scheme links\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \nopen\n \nurl\n:\n \nURL\n,\n \nsourceApplication\n:\n \nString\n?,\n \nannotation\n:\n \nAny\n)\n \n-\n \nBool\n \n{\n\n    \n// pass the url to the handle deep link call\n\n    \nBranch\n.\ngetInstance\n().\nhandleDeepLink\n(\nurl\n);\n\n\n    \n// do other deep link routing for the Facebook SDK, Pinterest SDK, etc\n\n    \nreturn\n \ntrue\n\n\n}\n\n\n\n// Respond to Universal Links\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ncontinue\n \nuserActivity\n:\n \nNSUserActivity\n,\n \nrestorationHandler\n:\n \n@\nescaping\n \n([\nAny\n]?)\n \n-\n \nVoid\n)\n \n-\n \nBool\n \n{\n\n    \n// pass the url to the handle deep link call\n\n    \nBranch\n.\ngetInstance\n().\ncontinue\n(\nuserActivity\n)\n\n\n    \nreturn\n \ntrue\n\n\n}\n\n\n\n\n\n\nDeep Link routing\n\n\nThe last core component of deep linking we need to add to your app is the code that decides where to take the user, depending on the data inside of the Branch link they clicked.\n\n\nTo start off, let's add a variable to the \nAppDelegate\n to let us track and set the type of animal we will show to the user on startup. Below the line with \nvar window: UIWindow?\n, add a new variable:\n\nvar\n \nselectedAnimal\n:\n \nString\n?\n\n\n\n\n\n\nNow, go back the the \ninitSession\n call you added earlier, and replace the:\n\nif\n \nerror\n \n==\n \nnil\n \n{\n\n    \n// params are the deep linked params associated with the link that the user clicked -\n was re-directed to this app\n\n    \n// params will be empty if no data found\n\n    \n// ... insert custom logic here ...\n\n    \nprint\n(\nparams: %@\n,\n \nparams\n.\ndescription\n)\n\n\n}\n\n\n\n\ncode with:\n\nif\n \nerror\n \n==\n \nnil\n \n \nparams\n?[\nanimal\n]\n \n!=\n \nnil\n \n{\n\n\n    \nself\n.\nselectedAnimal\n \n=\n \nparams\n?[\nanimal\n]\n!\n \nas\n!\n \nString\n?\n\n    \nprint\n(\nClicked animal link for \n\\(\nself\n.\nselectedAnimal\n!\n)\n!\n)\n\n\n    \nlet\n \nstoryboard\n \n=\n \nUIStoryboard\n(\nname\n:\n \nMain\n,\n \nbundle\n:\n \nnil\n)\n\n    \nlet\n \nmainController\n \n=\n \nstoryboard\n.\ninstantiateInitialViewController\n()\n!\n \nas\n \nUIViewController\n\n    \nself\n.\nwindow\n!.\nrootViewController\n \n=\n \nmainController\n\n\n    \nlet\n \ndestination\n \n=\n \nstoryboard\n.\ninstantiateViewController\n(\nwithIdentifier\n:\n \nanimalDetails\n)\n \nas\n!\n \nDetailViewController\n\n    \ndestination\n.\nselectedAnimal\n \n=\n \nString\n(\ndescribing\n:\n \nself\n.\nselectedAnimal\n!)\n\n\n    \nself\n.\nwindow\n!.\nrootViewController\n?.\npresent\n(\ndestination\n,\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n\n\n}\n\n\n\n\n\n\nThis is quite a change, so let's go back over it and see what each part is doing.\n\n\nTo start off, the first line:\n\nif\n \nerror\n \n==\n \nnil\n \n \nparams\n?[\n+clicked_branch_link\n]\n \n!=\n \nnil\n \n \nparams\n?[\nanimal\n]\n \n!=\n \nnil\n \n{\n\n\n\n\nis checking to make sure that:\n\n\n\n\nNo errors occurred while we were retrieving the deep link data from Branch\n\n\nThe deep link data the was returned has an \nanimal\n\n\n\n\nOnce we verified that nothing went wrong, and that we have the data we need in order to route the user, we set the \nselectedAnimal\n variable to the \nanimal\n in the deep link data:\n\nself\n.\nselectedAnimal\n \n=\n \nparams\n?[\nanimal\n]\n!\n \nas\n!\n \nString\n?\n\n\n\n\n\n\nNow, with an animal to show to the user, we can start preparing the view components that we will show to the user. In order to do this, we need to set up the main view controller, and then get an instance of the DetailViewController we will show to the user:\n\nlet\n \nstoryboard\n \n=\n \nUIStoryboard\n(\nname\n:\n \nMain\n,\n \nbundle\n:\n \nnil\n)\n\n\nlet\n \nmainController\n \n=\n \nstoryboard\n.\ninstantiateInitialViewController\n()\n!\n \nas\n \nUIViewController\n\n\nself\n.\nwindow\n!.\nrootViewController\n \n=\n \nmainController\n\n\n\nlet\n \ndestination\n \n=\n \nstoryboard\n.\ninstantiateViewController\n(\nwithIdentifier\n:\n \nanimalDetails\n)\n \nas\n!\n \nDetailViewController\n\n\n\n\n\n\nFinally, we set the \nselectedAnimal\n property of our destination view to the \nanimal\n we pulled from the returned deep link data, and present the view to the user.\n\n\ndestination\n.\nselectedAnimal\n \n=\n \nString\n(\ndescribing\n:\n \nself\n.\nselectedAnimal\n!)\n\n\n\nself\n.\nwindow\n!.\nrootViewController\n?.\npresent\n(\ndestination\n,\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n\n\n\n\n\nContent Sharing\n\n\nOne of the most valuable link distribution channels that you as a developer have access to are your users. To make sure that you fully support this, it's important to add content sharing functionality to your app, to provide an easy way for your users to create and send links. Thankfully, with Branch, content sharing is a very easy process. All you need to do is:\n\n\n\n\nConfigure the link properties (eg Redirect URL's)\n\n\nAdd link data (eg the \nanimal\n property)\n\n\nShow the user the share sheet\n\n\n\n\nTo add sharing to your Branch app, open the \nMainStoryboad\n file, and add a new button, called \"Share\", somewhere on the DetailView:\n\n\n\n\nControl + Drag\n the button into the \nDetailViewController\n\n\nChange the \nConnection\n type to \naction\n\n\nName the connection something like \nshareButton\n\n\n\n\n\n\nInside of the \n@IBAction func shareButton\n code block, add the following:\n\nlet\n \nlinkProperties\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlinkProperties\n.\nfeature\n \n=\n \nsharing\n\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/\n\\(\nselectedAnimal\n!\n)\n)\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\nanimal\n,\n \nvalue\n:\n \nselectedAnimal\n!)\n\n\nbranchUniversalObject\n.\ncanonicalIdentifier\n \n=\n \nselectedAnimal\n!\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \nanimalType\n.\ntext\n!\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \nCheck out my \n\\(\nselectedAnimal\n!\n)\n!\n\n\n\nbranchUniversalObject\n.\nshowShareSheet\n(\nwith\n:\n \nlinkProperties\n,\n\n    \nandShareText\n:\n \nHere\ns my \n\\(\nselectedAnimal\n!\n)\n!\n,\n\n    \nfrom\n:\n \nself\n)\n \n{\n \n(\nactivityType\n,\n \ncompleted\n)\n \nin\n\n    \nif\n \n(\ncompleted\n)\n \n{\n\n        \nprint\n(\nString\n(\nformat\n:\n \nCompleted sharing %@ to %@\n,\n \nself\n.\nselectedAnimal\n!,\n \nactivityType\n!))\n\n    \n}\n \nelse\n \n{\n\n        \nprint\n(\nLink sharing cancelled\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThe first thing we are doing here is creating a \nBranchLinkProperties\n object:\n\nlet\n \nlinkProperties\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlinkProperties\n.\nfeature\n \n=\n \nsharing\n\n\n\n\nwhich stores the \"control\" information on the link. This is the object used to define analytics information (in this case the feature) as well as the control parameters, like the iOS fallback URL.\n\n\nThe next object we are building is the \nBranchUniversalObject\n:\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/\n\\(\nselectedAnimal\n!\n)\n)\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\nanimal\n,\n \nvalue\n:\n \nselectedAnimal\n!)\n\n\nbranchUniversalObject\n.\ncanonicalIdentifier\n \n=\n \nselectedAnimal\n!\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \nanimalType\n.\ntext\n!\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \nCheck out my \n\\(\nselectedAnimal\n!\n)\n!\n\n\n\n\nThis contains social media information, like the link image and content description, as well as custom data, like the \nanimal\n.\n\n\nThe last part of the sharing flow is showing the \nshare sheet\n to the user, so they can select the app they would like to send the link with:\n\nbranchUniversalObject\n.\nshowShareSheet\n(\nwith\n:\n \nlinkProperties\n,\n\n    \nandShareText\n:\n \nHere\ns my \n\\(\nselectedAnimal\n!\n)\n!\n,\n\n    \nfrom\n:\n \nself\n)\n \n{\n \n(\nactivityType\n,\n \ncompleted\n)\n \nin\n\n    \nif\n \n(\ncompleted\n)\n \n{\n\n        \nprint\n(\nString\n(\nformat\n:\n \nCompleted sharing %@ to %@\n,\n \nself\n.\nselectedAnimal\n!,\n \nactivityType\n!))\n\n    \n}\n \nelse\n \n{\n\n        \nprint\n(\nLink sharing cancelled\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\nWhen the user chooses an app, the message body will automatically be populated with the message (eg \"Here's my cat!\") with a Branch link appended.", 
            "title": "Using the SDK"
        }, 
        {
            "location": "/using-sdk/#initializing-branch", 
            "text": "Now that we have all of the setup out of the way, we can start using the SDK. The first thing that we need to do is import the Branch SDK, so we can make use of it in your app. To do this, find the  import UIKit  line at the top of your  AppDelegate  file, and add a new line below it: import   Branch    Now that we have the SDK available to use, let's initialize a Branch session. To do this, open your  AppDelegate  file in Xcode, and find the  application:didFinishLaunchingWithOptions  section of code. On the line above  return true  add: let   branch   =   Branch . getInstance ()  \n\nThen, one line below, add the Branch  initSession  call: branch ?. initSession ( launchOptions :   launchOptions ,   andRegisterDeepLinkHandler :   { params ,   error   in \n     // Check if an error occurred while getting deep link data \n     if   error   ==   nil   { \n         // params are the deep linked params associated with the link that the user clicked -  was re-directed to this app \n         // params will be empty if no data found \n         // ... insert custom logic here ... \n         print ( params: %@ ,   params . description ) \n     }  })    This code initiates a call to Branch's API to retrieve any deep link data that might exist. Right now, all it's doing it printing the data out to Xcode's console, and then continuing startup as normal. To get your links to route users to the correct place in your app, we need to add some custom \"Deep link routing\" logic.", 
            "title": "Initializing Branch"
        }, 
        {
            "location": "/using-sdk/#handling-links", 
            "text": "Before we start deep linking to all the various parts of your app, we need to make sure that your app is aware of \"incoming\" links, and handles them correctly. To do this, add the following before the very last  }  in your  AppDelegate :  // Respond to URI scheme links  func   application ( _   application :   UIApplication ,   open   url :   URL ,   sourceApplication :   String ?,   annotation :   Any )   -   Bool   { \n     // pass the url to the handle deep link call \n     Branch . getInstance (). handleDeepLink ( url ); \n\n     // do other deep link routing for the Facebook SDK, Pinterest SDK, etc \n     return   true  }  // Respond to Universal Links  func   application ( _   application :   UIApplication ,   continue   userActivity :   NSUserActivity ,   restorationHandler :   @ escaping   ([ Any ]?)   -   Void )   -   Bool   { \n     // pass the url to the handle deep link call \n     Branch . getInstance (). continue ( userActivity ) \n\n     return   true  }", 
            "title": "Handling Links"
        }, 
        {
            "location": "/using-sdk/#deep-link-routing", 
            "text": "The last core component of deep linking we need to add to your app is the code that decides where to take the user, depending on the data inside of the Branch link they clicked.  To start off, let's add a variable to the  AppDelegate  to let us track and set the type of animal we will show to the user on startup. Below the line with  var window: UIWindow? , add a new variable: var   selectedAnimal :   String ?    Now, go back the the  initSession  call you added earlier, and replace the: if   error   ==   nil   { \n     // params are the deep linked params associated with the link that the user clicked -  was re-directed to this app \n     // params will be empty if no data found \n     // ... insert custom logic here ... \n     print ( params: %@ ,   params . description )  }  \n\ncode with: if   error   ==   nil     params ?[ animal ]   !=   nil   { \n\n     self . selectedAnimal   =   params ?[ animal ] !   as !   String ? \n     print ( Clicked animal link for  \\( self . selectedAnimal ! ) ! ) \n\n     let   storyboard   =   UIStoryboard ( name :   Main ,   bundle :   nil ) \n     let   mainController   =   storyboard . instantiateInitialViewController () !   as   UIViewController \n     self . window !. rootViewController   =   mainController \n\n     let   destination   =   storyboard . instantiateViewController ( withIdentifier :   animalDetails )   as !   DetailViewController \n     destination . selectedAnimal   =   String ( describing :   self . selectedAnimal !) \n\n     self . window !. rootViewController ?. present ( destination ,   animated :   true ,   completion :   nil )  }    This is quite a change, so let's go back over it and see what each part is doing.  To start off, the first line: if   error   ==   nil     params ?[ +clicked_branch_link ]   !=   nil     params ?[ animal ]   !=   nil   {  \n\nis checking to make sure that:   No errors occurred while we were retrieving the deep link data from Branch  The deep link data the was returned has an  animal   Once we verified that nothing went wrong, and that we have the data we need in order to route the user, we set the  selectedAnimal  variable to the  animal  in the deep link data: self . selectedAnimal   =   params ?[ animal ] !   as !   String ?    Now, with an animal to show to the user, we can start preparing the view components that we will show to the user. In order to do this, we need to set up the main view controller, and then get an instance of the DetailViewController we will show to the user: let   storyboard   =   UIStoryboard ( name :   Main ,   bundle :   nil )  let   mainController   =   storyboard . instantiateInitialViewController () !   as   UIViewController  self . window !. rootViewController   =   mainController  let   destination   =   storyboard . instantiateViewController ( withIdentifier :   animalDetails )   as !   DetailViewController    Finally, we set the  selectedAnimal  property of our destination view to the  animal  we pulled from the returned deep link data, and present the view to the user.  destination . selectedAnimal   =   String ( describing :   self . selectedAnimal !)  self . window !. rootViewController ?. present ( destination ,   animated :   true ,   completion :   nil )", 
            "title": "Deep Link routing"
        }, 
        {
            "location": "/using-sdk/#content-sharing", 
            "text": "One of the most valuable link distribution channels that you as a developer have access to are your users. To make sure that you fully support this, it's important to add content sharing functionality to your app, to provide an easy way for your users to create and send links. Thankfully, with Branch, content sharing is a very easy process. All you need to do is:   Configure the link properties (eg Redirect URL's)  Add link data (eg the  animal  property)  Show the user the share sheet   To add sharing to your Branch app, open the  MainStoryboad  file, and add a new button, called \"Share\", somewhere on the DetailView:   Control + Drag  the button into the  DetailViewController  Change the  Connection  type to  action  Name the connection something like  shareButton    Inside of the  @IBAction func shareButton  code block, add the following: let   linkProperties :   BranchLinkProperties   =   BranchLinkProperties ()  linkProperties . feature   =   sharing  let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   item/ \\( selectedAnimal ! ) )  branchUniversalObject . addMetadataKey ( animal ,   value :   selectedAnimal !)  branchUniversalObject . canonicalIdentifier   =   selectedAnimal !  branchUniversalObject . title   =   animalType . text !  branchUniversalObject . contentDescription   =   Check out my  \\( selectedAnimal ! ) !  branchUniversalObject . showShareSheet ( with :   linkProperties , \n     andShareText :   Here s my  \\( selectedAnimal ! ) ! , \n     from :   self )   {   ( activityType ,   completed )   in \n     if   ( completed )   { \n         print ( String ( format :   Completed sharing %@ to %@ ,   self . selectedAnimal !,   activityType !)) \n     }   else   { \n         print ( Link sharing cancelled ) \n     }  }    The first thing we are doing here is creating a  BranchLinkProperties  object: let   linkProperties :   BranchLinkProperties   =   BranchLinkProperties ()  linkProperties . feature   =   sharing  \n\nwhich stores the \"control\" information on the link. This is the object used to define analytics information (in this case the feature) as well as the control parameters, like the iOS fallback URL.  The next object we are building is the  BranchUniversalObject : let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   item/ \\( selectedAnimal ! ) )  branchUniversalObject . addMetadataKey ( animal ,   value :   selectedAnimal !)  branchUniversalObject . canonicalIdentifier   =   selectedAnimal !  branchUniversalObject . title   =   animalType . text !  branchUniversalObject . contentDescription   =   Check out my  \\( selectedAnimal ! ) !  \n\nThis contains social media information, like the link image and content description, as well as custom data, like the  animal .  The last part of the sharing flow is showing the  share sheet  to the user, so they can select the app they would like to send the link with: branchUniversalObject . showShareSheet ( with :   linkProperties , \n     andShareText :   Here s my  \\( selectedAnimal ! ) ! , \n     from :   self )   {   ( activityType ,   completed )   in \n     if   ( completed )   { \n         print ( String ( format :   Completed sharing %@ to %@ ,   self . selectedAnimal !,   activityType !)) \n     }   else   { \n         print ( Link sharing cancelled ) \n     }  }    When the user chooses an app, the message body will automatically be populated with the message (eg \"Here's my cat!\") with a Branch link appended.", 
            "title": "Content Sharing"
        }, 
        {
            "location": "/final/", 
            "text": "Congratulations! You've made it almost all the way through this guide. At this point, you should have:\n\n\n\n\nSet up Cocoapods on your computer, and installed the Branch SDK\n\n\nCreated a Branch app, and linked it with your Xcode project\n\n\nConfigured Universal Links and a URI Scheme\n\n\nSet up deep link routing to take users to an animal\n\n\n\n\nThe only thing left to do is test the integration out. Go back to your Branch dashboard, and \ncreate a new link\n. Name it anything you like, and then:\n\n\n\n\nClick \nConfigure Options\n\n\nSelect \n+ More Data\n\n\nSet the \nKey\n to \nanimal\n\n\nUpdate the \nValue\nto either \ncat\n or \ndog\n\n\nClick \nCreate now\n\n\n\n\n\n\nNext steps\n\n\nNow that you have a Branch integrated app, you can start expanding the list of animals that your app supports, or even switch to showing something completely different. However, with Branch integrated, you can easily route users, regardless of why type of app you create. Start thinking of a creative way you can make use of Branch, or \nvisit the docs\n to try out some of the more advanced things you can do with Branch.", 
            "title": "Putting it all together"
        }, 
        {
            "location": "/final/#next-steps", 
            "text": "Now that you have a Branch integrated app, you can start expanding the list of animals that your app supports, or even switch to showing something completely different. However, with Branch integrated, you can easily route users, regardless of why type of app you create. Start thinking of a creative way you can make use of Branch, or  visit the docs  to try out some of the more advanced things you can do with Branch.", 
            "title": "Next steps"
        }
    ]
}